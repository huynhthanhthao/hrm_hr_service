// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/huynhthanhthao/hrm_hr_service/ent/branch"
	"github.com/huynhthanhthao/hrm_hr_service/ent/predicate"
)

// BranchUpdate is the builder for updating Branch entities.
type BranchUpdate struct {
	config
	hooks    []Hook
	mutation *BranchMutation
}

// Where appends a list predicates to the BranchUpdate builder.
func (bu *BranchUpdate) Where(ps ...predicate.Branch) *BranchUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BranchUpdate) SetName(s string) *BranchUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableName(s *string) *BranchUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// SetCode sets the "code" field.
func (bu *BranchUpdate) SetCode(s string) *BranchUpdate {
	bu.mutation.SetCode(s)
	return bu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableCode(s *string) *BranchUpdate {
	if s != nil {
		bu.SetCode(*s)
	}
	return bu
}

// SetAddress sets the "address" field.
func (bu *BranchUpdate) SetAddress(s string) *BranchUpdate {
	bu.mutation.SetAddress(s)
	return bu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableAddress(s *string) *BranchUpdate {
	if s != nil {
		bu.SetAddress(*s)
	}
	return bu
}

// SetContactInfo sets the "contact_info" field.
func (bu *BranchUpdate) SetContactInfo(s string) *BranchUpdate {
	bu.mutation.SetContactInfo(s)
	return bu
}

// SetNillableContactInfo sets the "contact_info" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableContactInfo(s *string) *BranchUpdate {
	if s != nil {
		bu.SetContactInfo(*s)
	}
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BranchUpdate) SetCreatedAt(t time.Time) *BranchUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableCreatedAt(t *time.Time) *BranchUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BranchUpdate) SetUpdatedAt(t time.Time) *BranchUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// Mutation returns the BranchMutation object of the builder.
func (bu *BranchUpdate) Mutation() *BranchMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BranchUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BranchUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BranchUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BranchUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BranchUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := branch.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BranchUpdate) check() error {
	if v, ok := bu.mutation.Name(); ok {
		if err := branch.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Branch.name": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Code(); ok {
		if err := branch.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Branch.code": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Address(); ok {
		if err := branch.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Branch.address": %w`, err)}
		}
	}
	if v, ok := bu.mutation.ContactInfo(); ok {
		if err := branch.ContactInfoValidator(v); err != nil {
			return &ValidationError{Name: "contact_info", err: fmt.Errorf(`ent: validator failed for field "Branch.contact_info": %w`, err)}
		}
	}
	return nil
}

func (bu *BranchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(branch.Table, branch.Columns, sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(branch.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.Code(); ok {
		_spec.SetField(branch.FieldCode, field.TypeString, value)
	}
	if value, ok := bu.mutation.Address(); ok {
		_spec.SetField(branch.FieldAddress, field.TypeString, value)
	}
	if value, ok := bu.mutation.ContactInfo(); ok {
		_spec.SetField(branch.FieldContactInfo, field.TypeString, value)
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.SetField(branch.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(branch.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{branch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BranchUpdateOne is the builder for updating a single Branch entity.
type BranchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BranchMutation
}

// SetName sets the "name" field.
func (buo *BranchUpdateOne) SetName(s string) *BranchUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableName(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// SetCode sets the "code" field.
func (buo *BranchUpdateOne) SetCode(s string) *BranchUpdateOne {
	buo.mutation.SetCode(s)
	return buo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableCode(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetCode(*s)
	}
	return buo
}

// SetAddress sets the "address" field.
func (buo *BranchUpdateOne) SetAddress(s string) *BranchUpdateOne {
	buo.mutation.SetAddress(s)
	return buo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableAddress(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetAddress(*s)
	}
	return buo
}

// SetContactInfo sets the "contact_info" field.
func (buo *BranchUpdateOne) SetContactInfo(s string) *BranchUpdateOne {
	buo.mutation.SetContactInfo(s)
	return buo
}

// SetNillableContactInfo sets the "contact_info" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableContactInfo(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetContactInfo(*s)
	}
	return buo
}

// SetCreatedAt sets the "created_at" field.
func (buo *BranchUpdateOne) SetCreatedAt(t time.Time) *BranchUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableCreatedAt(t *time.Time) *BranchUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BranchUpdateOne) SetUpdatedAt(t time.Time) *BranchUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// Mutation returns the BranchMutation object of the builder.
func (buo *BranchUpdateOne) Mutation() *BranchMutation {
	return buo.mutation
}

// Where appends a list predicates to the BranchUpdate builder.
func (buo *BranchUpdateOne) Where(ps ...predicate.Branch) *BranchUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BranchUpdateOne) Select(field string, fields ...string) *BranchUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Branch entity.
func (buo *BranchUpdateOne) Save(ctx context.Context) (*Branch, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BranchUpdateOne) SaveX(ctx context.Context) *Branch {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BranchUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BranchUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BranchUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := branch.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BranchUpdateOne) check() error {
	if v, ok := buo.mutation.Name(); ok {
		if err := branch.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Branch.name": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Code(); ok {
		if err := branch.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Branch.code": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Address(); ok {
		if err := branch.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Branch.address": %w`, err)}
		}
	}
	if v, ok := buo.mutation.ContactInfo(); ok {
		if err := branch.ContactInfoValidator(v); err != nil {
			return &ValidationError{Name: "contact_info", err: fmt.Errorf(`ent: validator failed for field "Branch.contact_info": %w`, err)}
		}
	}
	return nil
}

func (buo *BranchUpdateOne) sqlSave(ctx context.Context) (_node *Branch, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(branch.Table, branch.Columns, sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Branch.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, branch.FieldID)
		for _, f := range fields {
			if !branch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != branch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(branch.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.Code(); ok {
		_spec.SetField(branch.FieldCode, field.TypeString, value)
	}
	if value, ok := buo.mutation.Address(); ok {
		_spec.SetField(branch.FieldAddress, field.TypeString, value)
	}
	if value, ok := buo.mutation.ContactInfo(); ok {
		_spec.SetField(branch.FieldContactInfo, field.TypeString, value)
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.SetField(branch.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(branch.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Branch{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{branch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
